<?php

/**
 * @file
 * Contains pria_settings.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_help().
 */
function harno_settings_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the pria_settings module.
    case 'help.page.harno_settings':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('HARNO settings module') . '</p>';
      return $output;

    default:
  }
}
/**
 * Implements hook_theme().
 */
function harno_settings_theme($existing, $type, $theme, $path) {
  $items = [];
  global $base_path;
  $theme_path = $theme = \Drupal::theme()->getActiveTheme()->getPath();
  $path = $base_path.'/'.$theme_path.'/templates/blocks';
  $items['harno_social_block'] = [
    'variables' => [
      'data' => []
    ],
    'path' => $path,
  ];
  $items['harno_footer_free_text_block'] = [
    'variables' => [
      'data' => []
    ],
    'path' => $path,
  ];
  $items['harno_important_contacts_block'] = [
    'variables' => [
      'data' => []
    ],
    'path' => $path,
  ];
  $items['harno_main_contacts_block'] = [
    'variables' => [
      'data' => []
    ],
    'path' => $path,
  ];
  $items['harno_footer_quick_links_block'] = [
    'variables' => [
      'data' => []
    ],
    'path' => $path,
  ];
  $items['harno_tos_block'] = [
    'variables' => [
      'data' => []
    ],
    'path' => $path,
  ];
  return $items;
}
/**
 * Implements hook_ENTITY_TYPE_prepare_form() for Nodes.
 */

function harno_settings_node_prepare_form(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Form\FormStateInterface $form_state) {
  //galerii lisamisel õppeaasta default väärtuse muutmine
  if ($entity->getType() == 'gallery') {
    if ($operation == 'default') {
      $default_value = 0;
      $today = date('Y-m-d');
      $vid = 'academic_year';
      $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, 0,  NULL, TRUE);
      foreach ($terms as $term) {
        $dates = $term->get('field_date_range')->getValue();
        $start_date = $dates[0]['value'];
        $end_date = $dates[0]['end_value'];
        if ($start_date <= $today AND $end_date >= $today) {
          $default_value = $term->id();
          break;
        }
      }
      $entity->set('field_academic_year', $default_value);
    }
  }
}
/**
 * Implements hook_cron().
 *
 * We implement hook_cron() to do "background" processing. It gets called every
 * time the Drupal cron runs. We then decide what has to happen in response.
 *
 */
function harno_settings_cron() {
  $config = \Drupal::config('harno_settings.settings');
  $on = $config->get('automatic_generation_academic_year.on');
  $date = $config->get('automatic_generation_academic_year.date');
  $today = date('d.m.');
  if ($on AND $today == $date) {
    $vid = 'academic_year';
    $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, 0,  NULL, TRUE);
    $found = FALSE;
    $today_year = date('Y');
    $next_year = date('Y', strtotime('+1 year'));
    foreach ($terms as $term) {
      $term_name = $term->getName();
      $next_term_name = $today_year . '/' . $next_year;
      if ($term_name == $next_term_name) {
        $found = TRUE;
        break;
      }
    }

    if (!$found) {
      $start_time = new DateTime();
      $start_time->setDate($today_year, 7, 16);

      $end_time = new DateTime();
      $end_time->setDate($next_year, 7, 15);

      $term = Term::create([
        'name' => $next_term_name,
        'vid' => $vid,
        'field_date_range' => [
          'value'=> $start_time->format('Y-m-d'),
          'end_value' => $end_time->format('Y-m-d')
        ]
      ]);
      $term->save();
      \Drupal::logger('harno_settings')->notice('Õppeaasta '.$next_term_name.' genereeriti automaatselt.');
    }
  }
}

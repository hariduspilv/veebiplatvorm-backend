<?php

/**
 * @file
 * Contains pria_settings.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function harno_settings_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the pria_settings module.
    case 'help.page.harno_settings':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('HARNO settings module') . '</p>';
      return $output;

    default:
  }
}
/**
 * Implements hook_theme().
 */
function harno_settings_theme($existing, $type, $theme, $path) {
  $items = [];
  global $base_path;
  $theme_path = $theme = \Drupal::theme()->getActiveTheme()->getPath();
  $path = $base_path.'/'.$theme_path.'/templates/blocks';

  $items['harno_social_block'] = [
    'variables' => [
      'data' => []
    ],
    'path' => $path,
  ];
  $items['harno_footer_free_text_block'] = [
    'variables' => [
      'data' => []
    ],
    'path' => $path,
  ];
  $items['harno_important_contacts_block'] = [
    'variables' => [
      'data' => []
    ],
    'path' => $path,
  ];
  $items['harno_main_contacts_block'] = [
    'variables' => [
      'data' => []
    ],
    'path' => $path,
  ];
  $items['harno_footer_quick_links_block'] = [
    'variables' => [
      'data' => []
    ],
    'path' => $path,
  ];
  $items['harno_tos_block'] = [
    'variables' => [
      'data' => []
    ],
    'path' => $path,
  ];
  return $items;
}
/**
 * Implements hook_ENTITY_TYPE_prepare_form() for Nodes.
 */

function harno_settings_node_prepare_form(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Form\FormStateInterface $form_state) {
  //galerii ja uudise lisamisel õppeaasta default väärtuse muutmine
  $node_types = ['gallery', 'article'];
  if (in_array($entity->getType(), $node_types)) {
    if ($operation == 'default') {
      $default_value = 0;
      $today = date('Y-m-d');
      $vid = 'academic_year';
      $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, 0,  NULL, TRUE);
      foreach ($terms as $term) {
        $dates = $term->get('field_date_range')->getValue();
        $start_date = $dates[0]['value'];
        $end_date = $dates[0]['end_value'];
        if ($start_date <= $today AND $end_date >= $today) {
          $default_value = $term->id();
          break;
        }
      }
      $entity->set('field_academic_year', $default_value);
    }
  }
  // uudise lisamisel autori nime default väärtuse muutmine
  $node_types = ['article'];
  if (in_array($entity->getType(), $node_types)) {
    if ($operation == 'default') {
      // Load the current user.
      $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
      $default_value = $user->get('name')->value; //TODO: muuta kasutaja päris nimeks, kui see lisatakse user juurde
      $entity->set('field_author_name', $default_value);
    }
  }
}
/**
 * Implements hook_ENTITY_TYPE_presave() for Nodes.
 */
function harno_settings_node_presave(Drupal\Core\Entity\EntityInterface $entity)   {
  $node_types = ['article'];
  if (in_array($entity->getType(), $node_types)) {
    $sticky = $entity->get('sticky')->value;
    //kui lisati oluline uudis, siis eemaldame kõigilt teistelt selle valiku.
    if ($sticky) {
      $storage = \Drupal::service('entity_type.manager')->getStorage('node');
      $sticky_entities = $storage->loadByProperties([
        'type' => 'article',
        'langcode' => $entity->get('langcode')->value,
        'sticky' => 1,
      ]);
      foreach ($sticky_entities as $se) {
        if ($entity->get('nid')->value != $se->get('nid')->value) {
          $se->set('sticky', 0);
          $se->save();
          $node_link = $se->toLink(t('View'))->toString();
          \Drupal::logger('harno_settings')->notice('Eemaldati "Olulise uudise" märge uudiselt "%title". @link',
            array(
              '%title' => $se->get('title')->value,
              '@link' => $node_link,
            )
          );
        }
      }
    }
  }
}

/**
 * Adding our custom validation functions.
 */
function harno_settings_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $forms = ['node_article_edit_form', 'node_article_form'];
  $forms_user = ['user_register_form', 'user_form'];
  if (in_array($form['#form_id'], $forms)) {
    $form['#validate'][] = '_harno_settings_validate_sticky';

    $config = \Drupal::config('harno_settings.settings');
    $news_our_story_name = $config->get('news_our_story.name');
    $form['field_article_type']['widget']['#options'][2] = $news_our_story_name;
    $form['sticky']['widget']['#title'] = $form['sticky']['widget']['value']['#title'] = 'Oluline uudis';
  }
  elseif (in_array($form['#form_id'], $forms_user)) {
    //$form['field_identification_number']['widget'][0]['value']['#maxlength'] = 11;
    $form['#validate'][] = '_harno_settings_validate_integer_length';
    $form['#attached']['library'][]  = 'harno_settings/admin_user_forms';
    if(!empty($form['field_identification_number']['widget'][0]['value']['#default_value'])) {
      $form['field_identification_number']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
    }
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function harno_settings_entity_bundle_field_info_alter(&$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle) {
  if ($bundle === 'user') {
    if (isset($fields['field_identification_number'])) {
      $fields['field_identification_number']->addConstraint('UniqueField', []);
    }
  }
}


/**
 * Custom validation function for news sticky value.
 */
function _harno_settings_validate_sticky(&$form, FormStateInterface $form_state) {
  if ($form_state->hasValue('field_article_type')) {
    $field_article_type = $form_state->getValue('field_article_type');
    $sticky = $form_state->getValue('sticky');
    if ($field_article_type[0]['value'] == 2 AND $sticky['value']) {
      $config = \Drupal::config('harno_settings.settings');
      $news_our_story_name = $config->get('news_our_story.name');
      $form_state->setErrorByName('sticky', 'Oluline uudis ei saa olla "'.$news_our_story_name.'" tüüpi.');
    }
  }
}

/**
 * Custom validation function for news sticky value.
 */
function _harno_settings_validate_integer_length(&$form, FormStateInterface $form_state) {
  if ($form_state->hasValue('field_identification_number')) {
    $field_identification_number = $form_state->getValue('field_identification_number');
    $length = strlen($field_identification_number[0]['value']);
    if ($length != 11) {
      $form_state->setErrorByName('field_identification_number', 'Isikukood peab olema täpselt 11 numbrit. Hetkel on see ' . $length . '.');
    }
  }
}
/**
 * Implements hook_cron().
 *
 * We implement hook_cron() to do "background" processing. It gets called every
 * time the Drupal cron runs. We then decide what has to happen in response.
 *
 */
function harno_settings_cron() {
  $config = \Drupal::config('harno_settings.settings');
  //Õppeaasta automaatne genereerimine
  $on = $config->get('automatic_generation_academic_year.on');
  $date = $config->get('automatic_generation_academic_year.date');
  $today = date('d.m.');
  if ($on AND $today == $date) {
    $vid = 'academic_year';
    $terms =\Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, 0,  NULL, TRUE);
    $found = FALSE;
    $today_year = date('Y');
    $next_year = date('Y', strtotime('+1 year'));
    foreach ($terms as $term) {
      $term_name = $term->getName();
      $next_term_name = $today_year . '/' . $next_year;
      if ($term_name == $next_term_name) {
        $found = TRUE;
        break;
      }
    }

    if (!$found) {
      $start_time = new DateTime();
      $start_time->setDate($today_year, 7, 16);

      $end_time = new DateTime();
      $end_time->setDate($next_year, 7, 15);

      $term = Term::create([
        'name' => $next_term_name,
        'vid' => $vid,
        'field_date_range' => [
          'value'=> $start_time->format('Y-m-d'),
          'end_value' => $end_time->format('Y-m-d')
        ]
      ]);
      $term->save();
      \Drupal::logger('harno_settings')->notice('Õppeaasta %title genereeriti automaatselt.',
        array(
          '%title' => $next_term_name,
        )
      );
    }
  }
  //Uudistel arhiveerimise kuupäeva alusel "Ülendatud esilehele" eemaldamine
  $today = date('Y-m-d');
  $storage = \Drupal::service('entity_type.manager')->getStorage('node');
  $archive_entities = $storage->loadByProperties([
    'type' => 'article',
    'promote' => 1,
    'field_archiving_date' => $today,
  ]);
  foreach ($archive_entities as $ae) {
    $ae->set('promote', 0);
    $ae->save();
    $node_link = $ae->toLink(t('View'))->toString();
    \Drupal::logger('harno_settings')->notice('Eemaldati "Ülendatud esilehele" märge uudiselt "%title". @link',
      array(
        '%title' => $ae->get('title')->value,
        '@link' => $node_link,
      )
    );

  }
}

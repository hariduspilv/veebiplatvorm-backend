<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Cache\Cache;
use GuzzleHttp\Exception\RequestException;

function harno_pages_theme($existing, $type, $theme, $path)
{
  return [
    'galleries-page' => [
      'template' => 'galleries-page',
      'variables' => ['content' => [],'pager'=>[],'academic_years'=>[]],
      'path' => 'themes/custom/harno_theme/templates/pages',
    ],
    'news-page' => [
      'template' => 'news-page',
      'variables' => ['content' => [],'pager'=>[],'academic_years'=>[]],
      'path' => 'themes/custom/harno_theme/templates/pages',
    ],
    'contacts-page' => [
      'template' => 'contacts-page',
      'variables' => ['content' => [],'contact_filters'=>[], 'time' => []],
      'path' => 'themes/custom/harno_theme/templates/pages',
    ],
    'class-page' => [
      'template' => 'class-page',
      'variables' => ['content' => [],'time' => []],
      'path' => 'themes/custom/harno_theme/templates/pages',
    ],
    'galleries-response' => [
      'template' => 'galleries-response',
      'variables' => ['content' => [],'pager'=>[],'academic_years'=>[]],
      'path' => 'themes/custom/harno_theme/templates/responses',
    ],
    'news-response' => [
      'template' => 'news-response',
      'variables' => ['content' => [],'pager'=>[],'academic_years'=>[]],
      'path' => 'themes/custom/harno_theme/templates/responses',
    ],
    'contacts-response' => [
      'template' => 'contacts-response',
      'variables' => ['content' => [],'contact_filters'=>[]],
      'path' => 'themes/custom/harno_theme/templates/responses',
    ],
    'form-galleries' => [
      'template' => 'form-galleries',
      'render element' =>'children',
      'path' => 'themes/custom/harno_theme/templates/forms',
    ],
    'form-news' => [
      'template' => 'form-news',
      'render element' =>'children',
      'path' => 'themes/custom/harno_theme/templates/forms',
    ],
    'form-contacts' => [
      'template' => 'form-contacts',
      'render element' =>'children',
      'path' => 'themes/custom/harno_theme/templates/forms',
    ],
    'active-filters' => [
      'template' => 'active-filters',
      'render element' =>'children',
      'path' => 'themes/custom/harno_theme/templates/forms/filters',
    ],
    'contact-modal' => [
      'template' => 'contact-modal',
      'variables' => ['content' => [], 'title' => []],
      'path' => 'themes/custom/harno_theme/templates/pages/modal/filters',
    ],
  ];
}
/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function harno_pages_node_presave(\Drupal\node\NodeInterface $node) {
  // Allows for clearing of blocks based on node type.
  $node_type = $node->getType();
  if($node_type == 'location'){
    $address = $node->get('field_address')->getValue()[0]['value'];
    $x = $node->get('field_map_x_coordinate');
    $y = $node->get('field_map_y_coordinate');

    if(empty($x->getValue()) or empty($y->getValue())){
      $url_to_quest = 'http://inaadress.maaamet.ee/inaadress/gazetteer';
      $data = array(
        'address' => $address,
      );
      $data = http_build_query($data);

      try {
        $client = \Drupal::httpClient();
        $request = $client->request('GET', $url_to_quest . '?' . $data);
        $data = $request->getBody()->getContents();

        $data = json_decode($data);
        $nid = $node->get('nid')->getValue()[0]['value'];
        $x = $data->addresses[0]->viitepunkt_x;
        $y = $data->addresses[0]->viitepunkt_y;
        $street = $data->addresses[0]->aadresstekst;
        $city = $data->addresses[0]->asutusyksus;
        $county = $data->addresses[0]->maakond;
        $zip = $data->addresses[0]->sihtnumber;
        $data = [];
        $data['location']['x'] = $x;
        $data['location']['y'] = $y;
        $data['location']['street'] = $street;
        $data['location']['city'] = $city;
        $data['location']['county'] = $county;
        $data['location']['zipcode'] = $zip;
        $config = \Drupal::service('config.factory')->getEditable('harno_settings.node_location');
        $config->set('node_location_'.$nid, $data)
          ->save();
      }
      catch (RequestException $e) {
      }
    }
  }
  if($node_type=='gallery') {
    $tags = ['node_type:' . $node->getType()];
    Cache::invalidateTags($tags);
  }
  if($node_type=='page') {
    \Drupal::service('cache.render')->invalidateAll();
  }
  if($node_type=='article') {
    \Drupal::service('cache.render')->invalidateAll();
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function harno_pages_node_delete(\Drupal\node\NodeInterface $node) {
  // Allows for clearing of blocks based on node type.
  $node_type = $node->getType();
  if($node_type == 'gallery') {
    $tags = ['node_type:' . $node->getType()];
    Cache::invalidateTags($tags);
  }
  if($node_type == 'page') {
    \Drupal::service('cache.render')->invalidateAll();
  }
}
function harno_pages_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (in_array($form['#form_id'], ['harno_blocks_search_api_form'])) {
    $form['keys']['#attributes']['placeholder'] = t( 'Search' ).'...';
    $form['keys']['#is_search_header'] = true;
  }

  if (in_array($form['#form_id'], ['openid_connect_login_form'])) {
    $form['openid_connect_client_harid_login']['#attributes']['class'][] = 'btn btn-primary';
    $form['openid_connect_client_harid_login']['#value'] = t('Log in');
  }
  elseif (in_array($form['#form_id'], ['user_login_form'])) {
    $form['actions']['submit']['#attributes']['class'][] = 'btn btn-primary';
    $form['#attributes']['class'][] = 'form-group';
  }
}

function harno_pages_language_switch_links_alter(array &$links, $type, $path) {

  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  foreach($links as $key => $link) {
    if($language == $key) {
      $links[$key]['attributes']['aria-current'] = 'true';
    }
  }
}

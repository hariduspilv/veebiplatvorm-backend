<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 *
 * Example on how to alter theme settings form
 */
function harno_theme_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
}
function harno_theme_preprocess_block(&$variables) {
  if(!empty($variables['elements'])){
    if (isset($variables['elements']['#sidemenu'])){
      if (!$variables['elements']['#sidemenu']) {
        $variables['content']['#sidemenu'] = true;
      }
    }
  }
}
function harno_theme_preprocess_media(&$vars){

  if (isset($vars['elements'])){

    if(isset($vars['elements']['#thumbnail'])){
      if(isset($vars['content'])){
        if(!empty(($vars['content']['field_media_image']))){
//          dump($vars['content']['field_media_image']);
          $vars['content']['field_media_image']['#thumbnail'] = true;
        }
      }
    }
    if(isset($vars['elements']['#orientation'])){
      $vars['content']['field_media_image']['#orientation'] = $vars['elements']['#orientation'];
    }
    if(isset($vars['elements']['#setmodal'])){
      $vars['content']['field_media_image']['#setmodal'] = $vars['elements']['#setmodal'];
    }
    if(isset($vars['elements']['#gallerythumb'])){
      $vars['content']['field_media_image']['#gallerythumb'] = $vars['elements']['#gallerythumb'];
    }
  }
}
function harno_theme_preprocess_pager(&$vars){
//  kint($vars['items']);
  $vars['pager']['#quantity'] = 5;
  $element = $vars['pager']['#element'];
  $parameters = $vars['pager']['#parameters'];
  $quantity = $vars['pager']['#quantity'];
  $route_name = $vars['pager']['#route_name'];
  $route_parameters = isset($vars['pager']['#route_parameters']) ? $vars['pager']['#route_parameters'] : [];
  global $pager_page_array, $pager_total;
  $pager = \Drupal::service('pager.manager')->getPager();
  $items = [];

  // Nothing to do if there is only one page.
  if (isset($pager_total[$element]) AND !empty($pager_total[$element]) AND $pager_total[$element] <= 1) {
    return;
  }
  $tags = $vars['pager']['#tags'];

  // Calculate various markers within this pager piece:
  // Middle is used to "center" pages around the current page.
  $pager_middle = ceil($quantity / 2);
  $pager_current = $pager_max = 0;
  if (isset($pager_page_array[$element]) AND !empty($pager_page_array[$element]) ) {
    // current is the page we are currently paged to.
    $pager_current = $pager_page_array[$element] + 1;
  }
  // first is the first page listed by this pager piece (re quantity).
  $pager_first = $pager_current - $pager_middle + 1;

  // last is the last page listed by this pager piece (re quantity).
  $pager_last = $pager_current + $quantity - $pager_middle;
  if (isset($pager_total[$element]) AND !empty($pager_total[$element])) {
    // max is the maximum page number.
    $pager_max = $pager_total[$element];
  }
  // End of marker calculations.
  // Prepare for generation loop.
  $i = $pager_first;
  if ($pager_last > $pager_max) {

    // Adjust "center" if at end of query.
    $i = $i + ($pager_max - $pager_last);
    $pager_last = $pager_max;
  }
  if ($i <= 0) {

    // Adjust "center" if at start of query.
    $pager_last = $pager_last + (1 - $i);
    $i = 1;
  }

  // End of generation loop preparation.
  // Create the "first" and "previous" links if we are not on the first page.
  if (isset($pager_page_array[$element]) AND !empty($pager_page_array[$element]) AND $pager_page_array[$element] > 0) {
    $items['first'] = array();
    $updatedParameters =  \Drupal::service('pager.manager')->getUpdatedParameters($parameters, $element, 0);
    if (isset($updatedParameters['ajax_form'])){
      unset($updatedParameters['ajax_form']);
    }
    if (isset($updatedParameters['_wrapper_format'])){
      unset($updatedParameters['_wrapper_format']);
    }
    $options = array(
      'query' =>$updatedParameters,
    );

    $new_url =  Url::fromRoute($route_name,$route_parameters,$options);
    $items['first']['href'] = urldecode($new_url->toString());
    if (isset($tags[0])) {
      $items['first']['text'] = $tags[0];
    }
    $items['previous'] = array();
    $updatedParameters =  \Drupal::service('pager.manager')->getUpdatedParameters($parameters, $element, $pager_page_array[$element] - 1);
    if (isset($updatedParameters['ajax_form'])){
      unset($updatedParameters['ajax_form']);
    }
    if (isset($updatedParameters['_wrapper_format'])){
      unset($updatedParameters['_wrapper_format']);
    }
    $options = array(
      'query' => $updatedParameters,
    );
    $new_url =  Url::fromRoute($route_name,$route_parameters,$options);
    $items['previous']['href'] = urldecode($new_url->toString());
    if (isset($tags[1])) {
      $items['previous']['text'] = $tags[1];
    }
  }
  if ($i != $pager_max) {

    // Add an ellipsis if there are further previous pages.
    if ($i > 1) {
      $vars['ellipses']['previous'] = TRUE;
    }

    // Now generate the actual pager piece.
    for (; $i <= $pager_last && $i <= $pager_max; $i++) {

      $updatedParameters =  \Drupal::service('pager.manager')->getUpdatedParameters($parameters, $element, $i - 1);
      if (isset($updatedParameters['ajax_form'])){
        unset($updatedParameters['ajax_form']);
      }
      if (isset($updatedParameters['_wrapper_format'])){
        unset($updatedParameters['_wrapper_format']);
      }
      $options = array(
        'query' => $updatedParameters,
      );

      $new_url =  Url::fromRoute($route_name,$route_parameters,$options);
      $items['pages'][$i]['href'] = urldecode($new_url->toString());
      if ($i == $pager_current) {
        $vars['current'] = $i;
      }
    }

    // Add an ellipsis if there are further next pages.
    if ($i < $pager_max + 1) {
      $vars['ellipses']['next'] = TRUE;
    }
  }

  // Create the "next" and "last" links if we are not on the last page.
  if(isset($pager_page_array[$element]) AND !empty($pager_page_array[$element])) {
    if ($pager_page_array[$element] < $pager_max - 1) {
      $items['next'] = [];
      $updatedParameters = \Drupal::service('pager.manager')
        ->getUpdatedParameters($parameters, $element, $pager_page_array[$element] + 1);
      if (isset($updatedParameters['ajax_form'])) {
        unset($updatedParameters['ajax_form']);
      }
      if (isset($updatedParameters['_wrapper_format'])) {
        unset($updatedParameters['_wrapper_format']);
      }
      $options = [
        'query' => $updatedParameters,
      ];

      $new_url = Url::fromRoute($route_name, $route_parameters, $options);
      $items['next']['href'] = $new_url->toString();
      if (isset($tags[3])) {
        $items['next']['text'] = $tags[3];
      }
      $items['last'] = [];

      $updatedParameters = \Drupal::service('pager.manager')
        ->getUpdatedParameters($parameters, $element, $pager_max - 1);
      if (isset($updatedParameters['ajax_form'])) {
        unset($updatedParameters['ajax_form']);
      }
      if (isset($updatedParameters['_wrapper_format'])) {
        unset($updatedParameters['_wrapper_format']);
      }
      $options = [
        'query' => $updatedParameters,
      ];
      $new_url = Url::fromRoute($route_name, $route_parameters, $options);
      $items['last']['href'] = urldecode($new_url->toString());
      if (isset($tags[4])) {
        $items['last']['text'] = $tags[4];
      }
    }
  }
  $vars['items'] = $items;

  // The rendered link needs to play well with any other query parameter used
  // on the page, like exposed filters, so for the cacheability all query
  // parameters matter.
  $vars['#cache']['contexts'][] = 'url.query_args';
  if (!empty($vars['items'])){
    if (!empty($vars['items']['last'])){
      $vars['items']['last']['real_number'] = $pager->getTotalPages();
    }
    if (!empty($vars['items']['first'])){

      $vars['items']['first']['real_number'] = 1;
    }
  }
}
function harno_theme_preprocess_checkboxes(&$vars){
  if(isset($vars['element']['#webform_element'])){
    if(isset($vars['element']['#options'])){
      foreach ($vars['element']['#options'] as $key =>$option){
        if (isset($vars['element'][$key])){
          $vars['element'][$key]['#webform_element'] = true;
        }
      }
    }
  }
}
function harno_theme_find_links($text){
  $regexp = "<a\s[^>]*href=(\"??)([^\" >]*?)\\1[^>]*>(.*)<\/a>";
  if(preg_match_all("/$regexp/siU", $text, $matches)) {
    if(!empty($matches[0])){
      foreach ($matches[0] as $key => $full_link){

        $new_full_link = '';
        $new_full_link = $full_link;
        if (!empty($matches[2][$key])) {
          $link = $matches[2][$key];
          $external_test = \Drupal\Component\Utility\UrlHelper::isExternal($link);
          if(!empty($matches[3][$key])){
            $link_text = $matches[3][$key];
          }
          if(!empty($link) && !empty($link_text)){
            if ($external_test){
              $new_full_link = '<a class="link-in-new" target="_blank" href="'.$link.'">'.$link_text.'<span class="sr-only">'.t( "link opens on new page" ).'</span><i class="mdi mdi-open-in-new" aria-label="'.$link_text.'"></i></a>';
            }
            else{
              $new_full_link = '<a class="btn-link-secondary" href="'.$link.'">'.$link_text.'</a>';
            }
          }
          else{
            $new_full_link = $full_link;
          }
        }
        $text = str_replace($full_link,$new_full_link,$text);
      }
    }
  }
  return $text;
}
function harno_theme_preprocess_field(&$vars){
  if($vars['field_name']=='body' or $vars['field_name']=='field_body'){
    if(!empty($vars['items'])){
      foreach ($vars['items'] as &$content){
        if (!empty($content['content'])){
          if(!empty($content['content']['#text'])){
            $text = $content['content']['#text'];
            $text = harno_theme_find_links($text);
            $content['content']['#text'] = $text;
              // $matches[2] = array of link addresses
              // $matches[3] = array of link text - including HTML code

          }

        }
      }
    }
  }
  if ($vars['field_name'] == 'field_images'){
    $vars['#cache']['tags'] = ['gallery-block'];
  }
  if($vars['field_name']=='field_content_blocks_100'){
    if(isset($vars['element']['#col_with'])){
      foreach ($vars['items'] as &$content){
//        devel_dump($content);
        $content['content']['#content-width'] = $vars['element']['#col_with'];
      }
    }
  }
  if($vars['field_name'] == 'field_table_editor'){
    if (!empty($vars['items'])){
      foreach ($vars['items'] as &$item){
        if(!empty($item['content'])){
          if(!empty(($item['content']['#text']))){

            $item['content']['#text'] = str_replace('<table>','<table class="main-table">',$item['content']['#text'] );
            $item['content']['#text'] = str_replace('<table','<div class="table-wrapper" data-tables="inside">
  <div class="table-scrollable"><table',$item['content']['#text'] );
            $item['content']['#text'] = str_replace('</table>','</table><div class="mobile-edge-right"></div>
    <div class="mobile-edge-left"></div>
  </div><!--/table-scrollable-->
</div><!--/table-wrapper-->',$item['content']['#text'] );
            $item['content']['#text'] = harno_theme_find_links($item['content']['#text']);
          }
        }
      }
    }
  }
}
function harno_theme_preprocess_paragraph(&$vars){

  if(isset($vars['elements'])){
    if (isset($vars['content']['field_content_blocks_25_1']) && isset($vars['content']['field_content_blocks_25_2']) && isset($vars['content']['field_content_blocks_25_3'])&& isset($vars['content']['field_content_blocks_25_4'])){
      $numitems = count($vars['content']);
      $i=0;
      foreach ($vars['content'] as $key => &$content){
        if (!isset($content['#title'])){
          $i++;
        }
      }
        $j=0;
      $reverse_array = array_reverse($vars['content'],true);
      if ($i==1 or $i==3) {
        foreach ($reverse_array as &$content) {
          if (!empty($content['#title'])) {
            if ($j < $i) {
                $content['#tablet_with'] = TRUE;

            }
            if ($i == 3) {
              $content['#tablet_with'] = TRUE;
            }
            $j++;
          }
        }
      }
      $vars['content'] = array_reverse($reverse_array,true);

    }
    if (isset($vars['content']['field_content_blocks_25_1']) && isset($vars['content']['field_content_blocks_75_1'])) {
      $i=0;
      foreach ($vars['content'] as $key => &$content){
        if (!isset($content['#title'])){
          $i++;
        }
      }
      $reverse_array = array_reverse($vars['content'],true);
      if ($i==1) {
        $j=0;
        foreach ($reverse_array as &$content) {
          if (!empty($content['#title'])) {
            if ($j < $i) {
              $content['#tablet_with'] = TRUE;
            }
            $j++;
          }
        }
      }
      $vars['content'] = array_reverse($reverse_array,true);
    }
    if (isset($vars['content']['field_content_blocks_25_1']) && isset($vars['content']['field_content_blocks_50_1'])&& isset($vars['content']['field_content_blocks_25_2'])) {
      $i=0;
      $quarter_width = 0;
      foreach ($vars['content'] as $key => &$content){

        if (isset($content['#field_name'])){
          if (strpos($content['#field_name'], 'field_content_blocks_25') !== false) {
            $quarter_width++;
          }
        }
        if (!isset($content['#title'])){
          $i++;
        }
      }
      if ($quarter_width>0 && $quarter_width<2){

        foreach ($vars['content'] as &$content) {
          if (isset($content['#field_name'])){
            if (strpos($content['#field_name'], 'field_content_blocks_50') !== false) {
              $content['#tablet_with'] = true;
              $quarter_width--;
            }
          }
          if ($quarter_width==0){
            break;
          }
        }
      }
      $reverse_array = array_reverse($vars['content'],true);
      if ($i==1) {
        $j=0;
        foreach ($reverse_array as &$content) {
          if (!empty($content['#title'])) {
            if ($j < $i) {
              $content['#tablet_with'] = TRUE;
            }
            $j++;
          }
        }
      }
      $vars['content'] = array_reverse($reverse_array,true);
    }
      if(isset($vars['elements']['field_orientation'])){

      $orientation = $vars['elements']['field_orientation']['#object']->get('field_orientation')->getValue();
      $orientation = $orientation[0]['value'];
        if (!empty($vars['content']['field_gallery_id'])){
          $vars['content']['field_gallery_id']['#orientation'] = $orientation;
        }
     $vars['content']['field_images']['#orientation'] = $orientation;
    }
    if(isset($vars['elements']['field_content_blocks_100'])){
      $vars['content']['field_content_blocks_100']['#col_with'] = '100';
    }
  }
}
function harno_theme_preprocess_breadcrumb(&$vars){
  if (count($vars['links'])==1) {
    $current_path = \Drupal::service('path.current')->getPath();
    $request = \Drupal::request();
    if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
      $title = \Drupal::service('title_resolver')->getTitle($request, $route);
    }
    $vars['links'][] = Link::createFromRoute($title, $current_path);
    $vars['breadcrumb'][] = [ 'text' => $title];
  }
}
function harno_theme_preprocess_html(&$vars){
  $localconf = \Drupal::service('config.factory')->get('harno_settings.colors');
  $colors = $localconf->get('color');
  if(!empty($colors)){
    $vars['site_colors'] = $colors;
  }
}
function harno_theme_preprocess_node(&$variables) {
  $node = $variables['node'];
  $node_type = $node->getType();

  $variables['bsrul'] = $GLOBALS['base_url'];
  if($node_type == 'location') {
    // Status messages
    $status_messages = array('#type' => 'status_messages');
    $messages = \Drupal::service('renderer')->renderRoot($status_messages);
    $variables['status_message'] = $messages;
    $nid = $node->get('nid')->getValue()[0]['value'];
    $config = \Drupal::config('harno_settings.node_location');
    $variables['node_location'] = $config->get('node_location_' . $nid);
  }

  if ($node_type == 'calendar') {
    $now = strtotime(date("Y-m-d H:i:s"));
    $field_start_date = $node->get('field_start_date')->getValue();
    #$field_start_time = $node->get('field_event_start_time')->getValue();
    $field_end_date = $node->get('field_event_end_date')->getValue();
    $field_end_time = $node->get('field_event_end_time')->getValue();

    if (!isset($field_end_date[0]['value']) ) {
      $field_end_date = $field_start_date;
    }
    if (!isset($field_end_time[0]['value']) ) {
      $field_end_time[0]['value'] = 86340; //23:59
    }

    if (isset($field_end_time[0]['value']) AND !empty($field_end_time[0]['value'])) {
      $seconds = $field_end_time[0]['value'];
      $hours = floor($seconds / 3600);
      $mins = floor($seconds / 60 % 60);
      $secs = floor($seconds % 60);
      $timeFormat = sprintf('%02d:%02d:%02d', $hours, $mins, $secs);
      $end_date = strtotime($field_end_date[0]['value'] . ' ' . $timeFormat );
    }
    else {
      $end_date = strtotime($field_end_date[0]['value']);
    }

    #\Drupal::messenger()->addStatus('$end_date ' . date("d.m.Y H:i:s", $end_date));
    #\Drupal::messenger()->addStatus('$today ' . date("d.m.Y H:i:s", $now));
    #\Drupal::messenger()->addStatus('$field_start_time ' . print_r($field_start_time,1));
    #\Drupal::messenger()->addStatus('$field_end_time ' . print_r($field_end_time,1));

    if ($end_date < $now)  {
      $variables['past_event'] = TRUE;
    }
    else {
      $variables['future_event'] = TRUE;
    }
  }
}

function harno_theme_preprocess_views_view_unformatted(&$variables)
{
  if ($variables['view']->current_display == 'general_search') {
    $args = $variables['view']->getExposedInput();

    $new_rows = [];
    $types_order = [
      'page' => ['order' => 1, 'label' => t('Basic pages')],
      'worker' => ['order' => 2, 'label' => t('Contacts')],
      'location' => ['order' => 3, 'label' => t('Locations')],
      'article' => ['order' => 4, 'label' => t('News')],
      'calendar_event' => ['order' => 5, 'label' => t('Events')],
      'calendar_training' => ['order' => 6, 'label' => t('Trainings')],
      'class' => ['order' => 7, 'label' => t('Classes')],
      'gallery' => ['order' => 8, 'label' => t('Galleries')],
    ];

    $count = 0;
    foreach ($variables['rows'] as $row) {
      if (!empty($row['content'])) {
        #\Drupal::messenger()->addStatus('$row' . print_r($row['content']['#node'],1));
        if (!empty($row['content']['#node'])) {
          $node = $row['content']['#node'];

          $type = $node->getType();
          if ($type == 'calendar') {
            $calendar_types = $node->get('field_event_type')->getValue();
            $count_calendar_types = count($calendar_types);
            foreach ($calendar_types as $ct_key => $ct) {
              if ($ct['value'] == 1) {
                $type = 'calendar_training';
              } elseif ($ct['value'] == 2) {
                $type = 'calendar_event';
              }

              if ($ct_key <= $count_calendar_types - 2 and $count_calendar_types > 1) {
                $label = $types_order[$type]['label'];

                $new_rows[$types_order[$type]['order']]['title'] = $label;
                $new_rows[$types_order[$type]['order']]['type'] = $type;
                $new_rows[$types_order[$type]['order']]['rows'][] = $row;
                $count++;
              }
            }
            # \Drupal::messenger()->addStatus('$row' . print_r($calendar_types,1));
          }

          $label = $types_order[$type]['label'];

          $new_rows[$types_order[$type]['order']]['title'] = $label;
          $new_rows[$types_order[$type]['order']]['type'] = $type;
          $new_rows[$types_order[$type]['order']]['rows'][] = $row;
          $count++;
        }
      }
    }
    #
    if (isset($args['search_type'])) {
      if (!isset($args['search_type'][5]) and isset($new_rows[5])) {
        $count = $count - count($new_rows[5]['rows']);
        unset($new_rows[5]);
      } elseif (!isset($args['search_type'][6]) and isset($new_rows[6])) {
        $count = $count - count($new_rows[6]['rows']);
        unset($new_rows[6]);
      }
    }


    #\Drupal::messenger()->addStatus('New rows ' . print_r($new_rows,1));
    if (!empty($new_rows)) {
      ksort($new_rows);
      #kalendri jarjekorra muutmine
      for ($o = 5; $o <= 6; $o++) {
        if (!empty($new_rows[$o]['rows'])) {
          $new_calendar_rows = [];
          foreach ($new_rows[$o]['rows'] as $c_row) {
            $node = $c_row['content']['#node'];
            $field_start_date = $node->get('field_start_date')->getValue();
            $field_start_time = $node->get('field_event_start_time')
              ->getValue();
            if (isset($field_start_time[0]['value']) and !empty($field_start_time[0]['value'])) {
              $seconds = $field_start_time[0]['value'];
              $hours = floor($seconds / 3600);
              $mins = floor($seconds / 60 % 60);
              $secs = floor($seconds % 60);
              $timeFormat = sprintf('%02d:%02d:%02d', $hours, $mins, $secs);
              $start_date = strtotime($field_start_date[0]['value'] . ' ' . $timeFormat);
            } else {
              $start_date = strtotime($field_start_date[0]['value']);
            }
            $new_calendar_rows[$start_date] = $c_row;

            #\Drupal::messenger()->addStatus('$start_date ' . date("d.m.Y H:i:s", $start_date));
          }
          krsort($new_calendar_rows);
          $new_rows[$o]['rows'] = $new_calendar_rows;
        }
      }
      $variables['rows'] = $new_rows;
    }
    if (isset($count)) {
      $variables['search_result_total'] = $count;
    }
    if (!isset($args['search_type'])) {
      for ($o = 1; $o <= 8; $o++) {
        if (isset($variables['rows'][$o]['rows'])) {
          $variables['search_result_count'][$o] = count($variables['rows'][$o]['rows']);
        }
      }
    }
  }
}
function harno_theme_preprocess_webform(&$vars){

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof \Drupal\node\NodeInterface) {
    if ($node->getType() == 'location') {
      $wfid = $vars['element']['#webform_id'];
      $wf = \Drupal\webform\Entity\Webform::load($wfid);
      $vars['title'] = $wf->label();
    }
  }
}

/**
 * Prepares variables for menu templates on the homepage.
 *
 * Default template: menu.html.twig.
 *
 * @param $variables
 *   An Associative array containing:
 *   - menu_name: The machine name of the menu.
 *   - items: A nested list of menu items. Each menu item contains:
 *     - attributes: HTML attributes for the menu item.
 *     - below: The menu item child items.
 *     - title: The menu link title.
 *     - url: The menu link url, instance of \Drupal\Core\Url
 *     - localized_options: Menu link localized options.
 *     - is_expanded: TRUE if the link has visible children within the current
 *       menu tree.
 *     - is_collapsed: TRUE if the link has children within the current menu tree
 *       that are not currently visible.
 *     - in_active_trail: TRUE if the link is in the active trail.
 */
function harno_theme_preprocess_menu(&$variables) {
  if (!\Drupal::service('path.matcher')->isFrontPage()) {
    return;
  }

  $homepagePath = \Drupal::config('system.site')->get('page.front');
  $homepageUrl = \Drupal::service('path.validator')->getUrlIfValid($homepagePath);
  if (!$homepageUrl instanceof Url) {
    return;
  }

  $validHomepageRoutes = ['<front>', $homepageUrl->getRouteName()];
  foreach ($variables['items'] as $key => $item) {
    /** @var \Drupal\Core\Url $url */
    $url = $item['url'];
    if (
        $url instanceof Url &&
        $url->isRouted() &&
        \in_array($url->getRouteName(), $validHomepageRoutes, TRUE)
      ) {
        $variables['items'][$key]['in_active_trail'] = TRUE;
      }
  }
}

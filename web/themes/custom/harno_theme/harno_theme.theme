<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 *
 * Example on how to alter theme settings form
 */
function harno_theme_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
}
function harno_theme_preprocess_block(&$variables) {
  if(!empty($variables['elements'])){
    if (isset($variables['elements']['#sidemenu'])){
      if (!$variables['elements']['#sidemenu']) {
        $variables['content']['#sidemenu'] = true;
      }
    }
  }
}
function harno_theme_preprocess_media(&$vars){

  if (isset($vars['elements'])){

    if(isset($vars['elements']['#thumbnail'])){
      if(isset($vars['content'])){
        if(!empty(($vars['content']['field_media_image']))){
//          dump($vars['content']['field_media_image']);
          $vars['content']['field_media_image']['#thumbnail'] = true;
        }
      }
    }
    if(isset($vars['elements']['#orientation'])){
      $vars['content']['field_media_image']['#orientation'] = $vars['elements']['#orientation'];
    }
  }
}
function harno_theme_preprocess_pager(&$vars){
//  kint($vars['items']);
  $vars['pager']['#quantity'] = 5;
  $element = $vars['pager']['#element'];
  $parameters = $vars['pager']['#parameters'];
  $quantity = $vars['pager']['#quantity'];
  $route_name = $vars['pager']['#route_name'];
  $route_parameters = isset($vars['pager']['#route_parameters']) ? $vars['pager']['#route_parameters'] : [];
  global $pager_page_array, $pager_total;
  $pager = \Drupal::service('pager.manager')->getPager();


  // Nothing to do if there is only one page.
  if ($pager_total[$element] <= 1) {
    return;
  }
  $tags = $vars['pager']['#tags'];

  // Calculate various markers within this pager piece:
  // Middle is used to "center" pages around the current page.
  $pager_middle = ceil($quantity / 2);

  // current is the page we are currently paged to.
  $pager_current = $pager_page_array[$element] + 1;

  // first is the first page listed by this pager piece (re quantity).
  $pager_first = $pager_current - $pager_middle + 1;

  // last is the last page listed by this pager piece (re quantity).
  $pager_last = $pager_current + $quantity - $pager_middle;

  // max is the maximum page number.
  $pager_max = $pager_total[$element];

  // End of marker calculations.
  // Prepare for generation loop.
  $i = $pager_first;
  if ($pager_last > $pager_max) {

    // Adjust "center" if at end of query.
    $i = $i + ($pager_max - $pager_last);
    $pager_last = $pager_max;
  }
  if ($i <= 0) {

    // Adjust "center" if at start of query.
    $pager_last = $pager_last + (1 - $i);
    $i = 1;
  }

  // End of generation loop preparation.
  // Create the "first" and "previous" links if we are not on the first page.
  if ($pager_page_array[$element] > 0) {
    $items['first'] = array();
    $updatedParameters =  \Drupal::service('pager.manager')->getUpdatedParameters($parameters, $element, 0);
    if (isset($updatedParameters['ajax_form'])){
      unset($updatedParameters['ajax_form']);
    }
    if (isset($updatedParameters['_wrapper_format'])){
      unset($updatedParameters['_wrapper_format']);
    }
    $options = array(
      'query' =>$updatedParameters,
    );
    $items['first']['href'] = \Drupal::url($route_name, $route_parameters, $options);
    if (isset($tags[0])) {
      $items['first']['text'] = $tags[0];
    }
    $items['previous'] = array();
    $updatedParameters =  \Drupal::service('pager.manager')->getUpdatedParameters($parameters, $element, $pager_page_array[$element] - 1);
    if (isset($updatedParameters['ajax_form'])){
      unset($updatedParameters['ajax_form']);
    }
    if (isset($updatedParameters['_wrapper_format'])){
      unset($updatedParameters['_wrapper_format']);
    }
    $options = array(
      'query' => $updatedParameters,
    );
    $items['previous']['href'] = \Drupal::url($route_name, $route_parameters, $options);
    if (isset($tags[1])) {
      $items['previous']['text'] = $tags[1];
    }
  }
  if ($i != $pager_max) {

    // Add an ellipsis if there are further previous pages.
    if ($i > 1) {
      $vars['ellipses']['previous'] = TRUE;
    }

    // Now generate the actual pager piece.
    for (; $i <= $pager_last && $i <= $pager_max; $i++) {

      $updatedParameters =  \Drupal::service('pager.manager')->getUpdatedParameters($parameters, $element, $i - 1);
      if (isset($updatedParameters['ajax_form'])){
        unset($updatedParameters['ajax_form']);
      }
      if (isset($updatedParameters['_wrapper_format'])){
        unset($updatedParameters['_wrapper_format']);
      }
      $options = array(
        'query' => $updatedParameters,
      );

      $items['pages'][$i]['href'] = \Drupal::url($route_name, $route_parameters, $options);
      if ($i == $pager_current) {
        $vars['current'] = $i;
      }
    }

    // Add an ellipsis if there are further next pages.
    if ($i < $pager_max + 1) {
      $vars['ellipses']['next'] = TRUE;
    }
  }

  // Create the "next" and "last" links if we are not on the last page.
  if ($pager_page_array[$element] < $pager_max - 1) {
    $items['next'] = array();
    $updatedParameters = \Drupal::service('pager.manager')->getUpdatedParameters($parameters, $element, $pager_page_array[$element] + 1);
    if (isset($updatedParameters['ajax_form'])){
      unset($updatedParameters['ajax_form']);
    }
    if (isset($updatedParameters['_wrapper_format'])){
      unset($updatedParameters['_wrapper_format']);
    }
    $options = array(
      'query' => $updatedParameters,
    );
    $items['next']['href'] = \Drupal::url($route_name, $route_parameters, $options);
    if (isset($tags[3])) {
      $items['next']['text'] = $tags[3];
    }
    $items['last'] = array();

    $updatedParameters = \Drupal::service('pager.manager')->getUpdatedParameters($parameters, $element, $pager_max - 1);
    if (isset($updatedParameters['ajax_form'])){
      unset($updatedParameters['ajax_form']);
    }
    if (isset($updatedParameters['_wrapper_format'])){
      unset($updatedParameters['_wrapper_format']);
    }
    $options = array(
      'query' => $updatedParameters,
    );

    $items['last']['href'] = \Drupal::url($route_name, $route_parameters, $options);
    if (isset($tags[4])) {
      $items['last']['text'] = $tags[4];
    }
  }

  $vars['items'] = $items;

  // The rendered link needs to play well with any other query parameter used
  // on the page, like exposed filters, so for the cacheability all query
  // parameters matter.
  $vars['#cache']['contexts'][] = 'url.query_args';
  if (!empty($vars['items'])){
    if (!empty($vars['items']['last'])){
      $vars['items']['last']['real_number'] = $pager->getTotalPages();
    }
    if (!empty($vars['items']['first'])){

      $vars['items']['first']['real_number'] = 1;
    }
  }
}
function harno_theme_preprocess_field(&$vars){
  if ($vars['field_name'] == 'field_images'){
    $vars['#cache']['tags'] = ['gallery-block'];
  }
  if($vars['field_name']=='field_content_blocks_100'){
    if(isset($vars['element']['#col_with'])){
      foreach ($vars['items'] as &$content){
//        devel_dump($content);
        $content['content']['#content-width'] = $vars['element']['#col_with'];
      }
    }
  }
  if($vars['field_name'] == 'field_table_editor'){
    if (!empty($vars['items'])){
      foreach ($vars['items'] as &$item){
        if(!empty($item['content'])){
          if(!empty(($item['content']['#text']))){
            $item['content']['#text'] = str_replace('<table>','<table class="main-table">',$item['content']['#text'] );
            $item['content']['#text'] = str_replace('<table','<div class="table-wrapper" data-plugin="tableScroll">
  <div class="table-scrollable"><table',$item['content']['#text'] );
            $item['content']['#text'] = str_replace('</table>','</table><div class="mobile-edge-right"></div>
    <div class="mobile-edge-left"></div>
  </div><!--/table-scrollable-->
</div><!--/table-wrapper-->',$item['content']['#text'] );
          }
        }
      }
    }
  }
}
function harno_theme_preprocess_paragraph(&$vars){

  if(isset($vars['elements'])){
    if (isset($vars['content']['field_content_blocks_25_1']) && isset($vars['content']['field_content_blocks_25_2']) && isset($vars['content']['field_content_blocks_25_3'])&& isset($vars['content']['field_content_blocks_25_4'])){
      $numitems = count($vars['content']);
      $i=0;
      foreach ($vars['content'] as $key => &$content){
        if (!isset($content['#title'])){
          $i++;
        }
      }
        $j=0;
      $reverse_array = array_reverse($vars['content'],true);
      if ($i==1 or $i==3) {
        foreach ($reverse_array as &$content) {
          if (!empty($content['#title'])) {
            if ($j < $i) {
                $content['#tablet_with'] = TRUE;

            }
            if ($i == 3) {
              $content['#tablet_with'] = TRUE;
            }
            $j++;
          }
        }
      }
      $vars['content'] = array_reverse($reverse_array,true);

    }
    if (isset($vars['content']['field_content_blocks_25_1']) && isset($vars['content']['field_content_blocks_75_1'])) {
      $i=0;
      foreach ($vars['content'] as $key => &$content){
        if (!isset($content['#title'])){
          $i++;
        }
      }
      $reverse_array = array_reverse($vars['content'],true);
      if ($i==1) {
        $j=0;
        foreach ($reverse_array as &$content) {
          if (!empty($content['#title'])) {
            if ($j < $i) {
              $content['#tablet_with'] = TRUE;
            }
            $j++;
          }
        }
      }
      $vars['content'] = array_reverse($reverse_array,true);
    }
    if (isset($vars['content']['field_content_blocks_25_1']) && isset($vars['content']['field_content_blocks_50_1'])&& isset($vars['content']['field_content_blocks_25_2'])) {
      $i=0;
      $quarter_width = 0;
      foreach ($vars['content'] as $key => &$content){

        if (isset($content['#field_name'])){
          if (strpos($content['#field_name'], 'field_content_blocks_25') !== false) {
            $quarter_width++;
          }
        }
        if (!isset($content['#title'])){
          $i++;
        }
      }
      if ($quarter_width>0 && $quarter_width<2){

        foreach ($vars['content'] as &$content) {
          if (isset($content['#field_name'])){
            if (strpos($content['#field_name'], 'field_content_blocks_50') !== false) {
              $content['#tablet_with'] = true;
              $quarter_width--;
            }
          }
          if ($quarter_width==0){
            break;
          }
        }
      }
      $reverse_array = array_reverse($vars['content'],true);
      if ($i==1) {
        $j=0;
        foreach ($reverse_array as &$content) {
          if (!empty($content['#title'])) {
            if ($j < $i) {
              $content['#tablet_with'] = TRUE;
            }
            $j++;
          }
        }
      }
      $vars['content'] = array_reverse($reverse_array,true);
    }
      if(isset($vars['elements']['field_orientation'])){
      $orientation = $vars['elements']['field_orientation']['#object']->get('field_orientation')->getValue();
      $orientation = $orientation[0]['value'];
     $vars['content']['field_images']['#orientation'] = $orientation;
    }
    if(isset($vars['elements']['field_content_blocks_100'])){
      $vars['content']['field_content_blocks_100']['#col_with'] = '100';
    }
  }
}
